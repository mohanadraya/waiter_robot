import py_trees
import time

# === Robot State (shared memory) ===
robot_state = {
    "table_number": None,      # Set this from Telegram
    "food_loaded": False,      # Set by chef manually or sensor
    "tag_detected": None,      # Filled by AprilTag detection
    "at_table": False,         # Marked after successful delivery
    "at_base": True            # Updated when robot returns
}

# === Hardware-Ready Functions ===

def line_follow_step():
    """
    Replace this with your real IR sensor + motor control logic.
    """
    # Example:
    # ir_values = read_ir_array()
    # adjust_motors(ir_values)
    pass

def detect_apriltag_from_camera():
    """
    Replace this with your real OpenCV + camera detection code independent function.
    Return detected tag ID or None.
    """
    # Example:
    # frame = camera.read()
    # tag_id = detect_tag(frame)
    # return tag_id
    return None

def return_to_base():
    """
    Implement your actual logic to follow the line back to the base.
    """
    # Example:
    # while not at_base_position():
    #     line_follow_step()
    pass

def announce_delivery():
    """
    Add sound, LED, or message to Telegram to indicate delivery.
    """
    # Example:
    # buzzer.beep()
    # led.blink()
    # telegram_bot.send_message("Order delivered")
    pass

# === BT Nodes ===

class TableNumberReceived(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="TableNumberReceived")

    def update(self):
        if robot_state["table_number"] is not None:
            return py_trees.common.Status.SUCCESS
        return py_trees.common.Status.FAILURE

class FoodIsLoaded(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="FoodIsLoaded")

    def update(self):
        if robot_state["food_loaded"]:
            return py_trees.common.Status.SUCCESS
        return py_trees.common.Status.RUNNING

class FollowAndDetect(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="FollowAndDetect")

    def update(self):
        line_follow_step()
        tag_id = detect_apriltag_from_camera()

        if tag_id is not None:
            robot_state["tag_detected"] = tag_id
            return py_trees.common.Status.SUCCESS
        return py_trees.common.Status.RUNNING

class TagMatchesTable(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="TagMatchesTable")

    def update(self):
        if robot_state["tag_detected"] == robot_state["table_number"]:
            robot_state["at_table"] = True
            return py_trees.common.Status.SUCCESS
        return py_trees.common.Status.FAILURE

class AnnounceDelivery(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="AnnounceDelivery")

    def update(self):
        if robot_state["at_table"]:
            announce_delivery()
            return py_trees.common.Status.SUCCESS
        return py_trees.common.Status.FAILURE

class ReturnToStart(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="ReturnToStart")

    def update(self):
        return_to_base()
        robot_state["at_base"] = True
        return py_trees.common.Status.SUCCESS

class Idle(py_trees.behaviour.Behaviour):
    def __init__(self):
        super().__init__(name="Idle")

    def update(self):
        return py_trees.common.Status.RUNNING

# === Build the Behavior Tree ===

def create_behavior_tree():
    root = py_trees.composites.Selector(name="Root", memory=False)

    deliver_sequence = py_trees.composites.Sequence(name="DeliverFood", memory=False)
    deliver_sequence.add_children([
        TableNumberReceived(),
        FoodIsLoaded(),
        FollowAndDetect(),
        TagMatchesTable(),
        AnnounceDelivery(),
        ReturnToStart()
    ])

    idle = Idle()
    root.add_children([deliver_sequence, idle])
    return root

# === Run the Tree Loop (in main robot loop) ===

if __name__ == "__main__":
    tree = create_behavior_tree()
    bt = py_trees.trees.BehaviourTree(tree)
    bt.visitors.append(py_trees.visitors.SnapshotVisitor())

    # Main robot loop
    while True:
        bt.tick()

        # Optional: show BT status in console
        snapshot = bt.visitors[0]
        print(py_trees.display.unicode_tree(bt.root, visited=snapshot.visited))

        time.sleep(0.1)  # Adjust as needed